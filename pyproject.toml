[project]
name = "polebot"
version = "0.1.0"
description = "Poley's Hell Let Loose bot for CRCON."
authors = [{ name = "Rich Tebb", email = "rich@tebb.io" }]
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
dynamic = [ "dependencies" ]

[tool.poetry]
requires-poetry = ">=2.0"
packages = [
    { include = "crcon", from = "src" },
    { include = "polebot", from = "src" },
    { include = "utils", from = "src" },
]


[tool.poetry.dependencies]
python = "^3.13"
attrs = "^25.1.0"
websockets = "^15.0.1"
uvloop = "^0.21.0"
python-dotenv = "^1.0.1"
cattrs = "^24.1.2"
aiohttp = "^3.11.13"
yarl = "^1.18.3"
async-cache = "^1.1.1"
numpy = "^2.2.3"
pandas = "^2.2.3"
environ-config = "^24.1.0"
lagom = "^2.7.5"
typeguard = "^4.4.2"
cachetools = "^5.5.2"
wrapt = "^1.17.2"
motor = "^3.7.0"
discord-py = "^2.5.2"
audioop-lts = "^0.2.1"
jsonschema = "^4.23.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.9"
mypy = "^1.15.0"
pyright = "^1.1.396"
pytest = "^8.3.5"
aioresponses = "^0.7.8"
pytest-asyncio = "^0.25.3"
pytest-describe = "^2.2.0"
ipython = "^9.0.1"
ipykernel = "^6.29.5"
pandas-stubs = "^2.2.3.241126"
types-cachetools = "^5.5.0.20240820"
mongomock-motor = "^0.0.35"
types-jsonschema = "^4.23.0.20241208"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project.scripts]
polebot = "polebot.__main__:main"

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
describe_prefixes = [
    "describe_",
    "when_",
    "with_",
    "without_",
    "if_",
    "unless_",
    "for_",
]

[tool.pyright]
include = ["src", "tests"]
exclude = ["scripts", "docs", "out"]
reportMissingImports = "error"
reportOptionalMemberAccess = false
reportGeneralTypeIssues = true
reportOptionalSubscript = false
reportUnboundVariable = true

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = false
exclude = ["scripts", "docs", "out", "play"]
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
disallow_untyped_defs = false


[tool.ruff]
exclude = ["./scripts", "./docs", "./out", "./play"]
cache-dir = ".ruff_cache"
line-length = 120
indent-width = 4
# target-version = "py313"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    # pycodestyle errors
    "E",
    # pycodestyle warnings
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # flake8-comprehensions
    "C4",
    # pydocstyle
    "D",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-datetimez
    "DTZ",
    # flake8-import-conventions
    "ICN",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-use-pathlib
    "PTH",
]
ignore = ["D1", "UP007"]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.isort]
known-local-folder = ["src"]

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["E402"]
"src/polebot/api_models.py" = [
    "UP",
    "D",
] # this file is copied from hll_rcon_tool code so we don't want to modify it
"tests/*" = ["D", "ANN", "S"]

[tool.ruff.lint.pydocstyle]
convention = "google"
